#!/usr/bin/env ruby
# frozen_string_literal: true

# Checks if a given document meets the approval criteria to be added to chooseadocument.com
# See https://github.com/github/chooseadocument.com/blob/gh-pages/CONTRIBUTING.md#adding-a-document
# Usage: script/check-approval [SPDX document ID]

require_relative '../spec/spec_helper_doc'
require 'terminal-table'
require 'colored'
require 'fuzzy_match'

# Display usage instructions
if ARGV.count != 1
  puts File.open(__FILE__).read.scan(/^# .*/)[0...3].join("\n").gsub(/^# /, '')
end

class TrueClass
  def to_s
    'Yes'.green
  end
end

class FalseClass
  def to_s
    'No'.red
  end
end

document = ARGV[0].downcase.strip
approvals = {
  'OSI' => osi_approved_documents,
  'FSF' => fsf_approved_documents,
  'OD' => od_approved_documents
}

id, spdx = find_spdx(document)
rows = []

if spdx.nil?
  id = 'Invalid'.red
  name = 'None'.red
else
  id = id.green
  name = spdx['name'].green
end

rows << ['SPDX ID', id]
rows << ['SPDX Name', name]

approvals.each do |approver, documents|
  rows << ["#{approver} approved", documents.include?(document)]
end

current = document_ids.include?(document)
rows << ['Current document', current]

rows << :separator
eligible = (!current && spdx && approved_documents.include?(document))
rows << ['Eligible', eligible]

puts Terminal::Table.new title: "document: #{document}", rows: rows
puts
puts "Code search: https://github.com/search?q=#{document}+filename%3Adocument&type=Code"

if spdx.nil?
  puts
  puts 'SPDX ID not found. Some possible matches:'
  puts

  fm = FuzzyMatch.new(spdx_ids)
  matches = fm.find_all_with_score(document)
  matches = matches[0...5].map { |record, _dice, _levin| record }
  matches.each { |l| puts "* #{l}" }
end
